2022-09-28.

mysql ucreate command denied to user for table 에러 발생.

해결 : root 권한으로 grant all priviliges *.*로 권한을 준 다음
flush를 해줘야만, 유저에게 준 권한 적용이 제대로 된다.

Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your
 MySQL server version for the right syntax to use near 'rank varchar(255),

해결 : 엔티티의 이름으로 rank라는 이름을 쓰면, 데이터베이스랑 충돌이 일어나는 듯 함.
viprank로 enum의 이름을 바꿔서 해결!

Feat : Mysql의 순위함수중에 rank라는 함수가 있다고 합니다.

2022-09-30.

defined in com.sreviewonly.board.repositories.userrepository defined in @enablejparepositories declared on 
jparepositoriesregistrar.enablejparepositoriesconfiguration: 
invocation of init method failed; nested exception is java.lang.illegalargumentexception: 
not a managed type: class com.sreviewonly.board.entites.user

error 발생.
해결하려고 하는 중.

1. @NoRepositoryBean 어노테이션을 이용하여, 레포지토리에 잘 올라가는지 확인. no repository를 설정한 어노테이션에서는 에러가 발생하지 않음 = Bean에 올라가지 못하는 문제.
2. 트러블 슈팅 중 복붙했던 @MappingSuperclass 어노테이션 발견.
해당 어노테이션은 중복되는 엔티티를 상속받아 사용하기 위한 어노테이션인데, 모든 엔티티에 올라가 있어서 문제가 발생했다고 판단.
제거 후 다른 에러 발생.
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: 
Invocation of init method failed; nested exception is org.hibernate.AnnotationException: Use of @OneToMany or @ManyToMany targeting an unmapped class: com.sreviewonly.board.entites.User.reviews[com.sreviewonly.board.entites.Review]

매핑되지 않은 엔티티에 매핑을 걸었다는 이유로 에러 발생.
그럼 주인인 review를 먼저 생성해보자.

어라라? orphanRemove = true;를 제거하니까 그냥 작동이 됨.
오르판 리무브는, 데이터베이스를 편집할 때만 사용하는게 좋다고 생각됨.

해결 : @MappingSuperclass의 사용법과, orphanremove=true의 사용법을 잘 몰라서 일어난 일.

매핑 시 문제? 나타나지 않음.
그러나 GeneratedValue가 모든 테이블에 값을 insert할 때 마다 generateValue가 한번에 적용된다.
generate = GeneratedType.IDENTIFY로 mysql 내의 auto_increase 알고리즘을 사용하여 해결!
auto로 쓰게 되면 jpa 내의 generatedValue가 적용되어서 어떤 데이터베이스는 20부터 시작할수도 있다.


N:M Mapping

중요! N과 M사이에 중간 테이블을 만들어서, ManytoOne& OneToMany를 사용하여 중간 테이블을 만들어서 사용해주는게 좋다.
테이블 1:N 단방향 매핑이 좋지 않은 이유는,
매핑을 해도 외래키를 기준으로, 요소를 찾기 때문이다.

N+1 Problem
1. 실무에서 문제를 일어나지 않게 하기 위해, fetch = FetchType.LAZY로 지연 로딩을 사용한다.
그러나 지연 로딩을 사용하더라도, 지연 로딩으로 불러온 객체에서 새로운 값을 얻어내려면 다시 N+1개의 쿼리를 쏴줘야 하는 상황이 생김.
이 문제를 Fetch join으로 해결할 수 있으며, 이는 JPQL으로 불러올 수 있다.

2022-10-06
Spring boot Resource Live Loading을 시행하기 위해 구글링을 해봤으나. 아무리 해도 live loading이 되지 않음.
아마도 bootstrap의 영향 때문이라고 예상함.

2022-10-07
Spring boot의 front를 만지던 중, 이미지 경로가 잘 입력되지 않는 상황이 발생.
스프링 부트는 경로앞에 / 슬래시를 붙혀야, 절대 경로로 인식하므로
img src="/image/logo" 이렇게 붙혀야 함.

2022-10-08
html파일의 에 th:href를 눌러도 계속 적용이 안 됨.
해결 : onClick 부분을 location.href="link" 부분으로 치환하여 해결함.

Service -> ServiceImpl -> Controller
부분으로 가는 로직을 정리함.
Page<T> 타입으로 받아와서 View로 보내도, View로 잘 받아지며,
페이지에 접속했을 때, 쿼리가 돌아가서 정보를 받아온다.

2022-10-11

Page 객체를 list로 변환하는 함수 : page.getContent()를 사용해서 변환을 할 수 있다.

Page 객체를 th:each로 조회했지만, 객체조회가 안 되는 상황이 발생했다.
이는 localhost:8080으로 뒤에 접속하고자 하는 페이지를 접속하지 않아서 발생했던 상황이었다.
다음에는 맨 아래 index controller 대신에 asterisk를 자주 활용해봐야겠다.

Thymeleaf와 template engine의 오해.
대부분의 예제가 Table tbody의 tr td 단위로 th:each를 적용해서 테이블 요소만 적용이 되는 줄 알았지만,
ul -> li로 이어지는 html 템플릿에서도 제대로 적용이 된다!

2022-10-12

@Autowired로 객체를 집어넣은 Service에서 Bean을 찾지 못하는 에러 발생.
여러 부분 삽질을 해봤으나 얻은 결론은 : 
@Service Annotation을 Service랑 ServiceImpl 두 곳에 전부 붙혀야 된다는 사실.
둘 다 붙히니까 정상 작동된다.

///

Thymeleaf에서의 get parameter을 넣을 때는, details()를 붙히지 말고, 그냥 괄호를 치면 thymeleaf가 알아서 ?prefersex=mmt로
알아서 바꿔준다. 헷갈리지 말고 그냥 괄호를 넣으면 될 듯.

th:href="@{review_find_by_user(prefersex=${user.prefersex},id=${user.id})}"
괄호를 넣으면 thymeleaf가 저절로  ,   =>   & 으로 바꿔준다.


2022-10-13

Product와 Review Entity를 N:M Mapping을 설계했었는데,
그럴 경우 여러 Product를 가져오는게 어렵다고 판단했다.
그리고 유저가 리뷰를 올릴 때, 하나의 상품만 올리는 게 더 쉽다고 판단했다.
여러 리뷰가 하나의 상품만을 가져올 수 있을 경우, Product:Review를 1:N 양방향 매핑으로 묶는게 편하다고 판단,
테이블을 갈아엎었다.

2022-10-14
아무것도 없는 div에 요소를 동적으로 만들 때는 ,
element를 만들고 setAttribute로 속성을 집어넣기,
그리고 text를 createTextNode로 만들어서 appendChild() 함수를 통해 삽입한다.
그리고 마지막에 inserAdjacentElement()라는 함수를 이용하여 첫 인자를
beforeend로 넣게 되면, 이전 인자의 다음번 끝에 저절로 삽입이 된다!

Page<> 자료형
Page 자료형은 생각보다 편안하다.
PageRequest = PageRequest.of( 조회할 페이지의 순서 , 단위로 설정할 페이지의 수 )로 준 다음에,
getContent() 함수를 넣어주면 엄청 쉽게 개발에 성공할 수 있다.


2022-10-15
thymeleaf에서 null check를 해 줘야 하는 상황이 발생. 만약 null이면, 객체 자체를 띄워주지 않아야 html에 접속할 때 
spelEvaluationException이 터지지 않는다.
th:text="${hi?.getMember()?.getNickname()}"과 같이, Safe Search를 해 버리면 nullPointerException 문제를 피할 수 있다.

2022-10-18
this.reviewRepository is null 문제가 발생하였다.
문제는 Pagination 객체였다.
Pagenation 객체를 빈에 주입을 해 두었는데, 서비스 내부 함수에서 new Pagination 함수를 펼쳐버리고,
함수도 public 생성자로 주입해버리니 서비스 내에서 사용해야되는 pagination이,
컨트롤러에 있는 pagination을 사용해버리니 레포지토리를 찾을 수 없다는 오류가 발생한 것이었다.

최대한 의존성 주입을 해줄 땐 접근 제어자를 private로 실행하자.